{"version":3,"sources":["components/Form.js","components/Todo.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","ToDoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1db4332.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/*function Form(){}*/\r\n\r\n// main function with all ({ props })\r\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\r\n\r\n  //There I can write JS code and function\r\n\r\n    const inputTextHandler = (e) => {\r\n      console.log(e.target.value);\r\n      setInputText(e.target.value);\r\n    };\r\n\r\n    const submitTodoHandler = (e) => {\r\n      e.preventDefault();\r\n      setTodos([\r\n        ...todos, \r\n        { text: inputText, completed: false, id: Math.random() * 1000 },\r\n      ]);\r\n      setInputText(\"\");\r\n    };\r\n\r\n    const statusHandler = (e) => {\r\n      setStatus(e.target.value);\r\n    };\r\n\r\n    \r\n    return(\r\n        <form>\r\n        <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n\r\n        <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n\r\n        <div className=\"select\">\r\n          <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </select>\r\n        </div>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n    //Events\r\n\r\nconst deleteHandler = () => {\r\n    setTodos(todos.filter((el) => el.id !== todo.id));\r\n};\r\n\r\nconst completeHandler = () => {\r\n    setTodos(todos.map((item => {\r\n        if(item.id === todo.id){\r\n        return {\r\n            ...item, completed: !item.completed\r\n        }\r\n    }\r\n    return item;\r\n    })\r\n    ));\r\n};\r\n\r\n    return(\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n                {text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n                </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n                </button>\r\n        </div>\r\n        );\r\n};\r\n\r\n\r\nexport default Todo;","import React from 'react';\r\n//Import Components\r\nimport Todo from './Todo';\r\n\r\n// main function with all ({ props })\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map((todo) => (\r\n                    <Todo \r\n                    setTodos={setTodos} \r\n                    todos={todos} \r\n                    key={todo.id} \r\n                    todo={todo}\r\n                    text={todo.text} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, { useState, useEffect } from \"react\";\nimport './App.css';\n\n//Important components\nimport Form from \"./components/Form\";\nimport ToDoList from \"./components/ToDoList\";\n\n\nfunction App() {\n\n  //State stuff\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n\n  //Run once when the app start\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n\n  //Use effect\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n\n\n  //Functions\n  const filterHandler = () => {\n    switch(status){\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n\n  //Save to local\n  const saveLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      localStorage.setItem('todos', JSON.stringify(todos));\n    }\n  };\n  \n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  };\n\n\n\n  return (\n    <div className=\"App\">\n      <header>\n     <h1 className=\"h1-title\">Yann's To-Do-List</h1>\n      </header>\n\n      <Form\n      inputText={inputText}\n      todos={todos}\n      setTodos={setTodos}\n      setInputText={setInputText}\n      setStatus={setStatus}\n      />\n\n      <ToDoList\n      filteredTodos={filteredTodos}\n      setTodos={setTodos} \n      todos={todos} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}